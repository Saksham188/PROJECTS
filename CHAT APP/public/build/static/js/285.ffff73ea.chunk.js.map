{"version":3,"file":"static/js/285.ffff73ea.chunk.js","mappings":"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","sources":["components/SocialLoginButtons.jsx","pages/Register.jsx"],"sourcesContent":["import axios from 'axios'\r\nimport { FacebookAuthProvider, GithubAuthProvider, GoogleAuthProvider, signInWithPopup } from 'firebase/auth'\r\nimport React from 'react'\r\nimport { BsFacebook, BsGithub, BsGoogle } from 'react-icons/bs'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { firebaseLoginRoute } from '../utils/APIRoutes'\r\nimport { firebaseAuth } from '../utils/FirbaseConfig'\r\n\r\n\r\nexport default function SocialLoginButtons() {\r\n\r\n    const navigate=useNavigate()\r\n    const providers={\r\n        google:new GoogleAuthProvider(),\r\n        facebook: new FacebookAuthProvider(),\r\n        github: new GithubAuthProvider(),\r\n    }\r\n    const firebaseLogin=async(loginType)=>{\r\n        try {\r\n            \r\n            // here choose provider whether its fb or google or github\r\n            const provider=providers[loginType];\r\n            const userData=await signInWithPopup(firebaseAuth,provider);\r\n            // console.log(userData);\r\n            const email= userData.user.email ?\r\n            userData.user.email : userData.user.providerData[0].email;\r\n            \r\n            const {data}=await axios.post(firebaseLoginRoute,{email});\r\n            // if user is found then set user to local storage and send him to home page.\r\n            if(data.status)\r\n            {\r\n                localStorage.setItem('chat-app-user',JSON.stringify(data.user));\r\n                navigate(\"/\");\r\n            }\r\n            else\r\n            {\r\n                // if user is not found navigate him to setusername page\r\n                navigate(\"/setusername\")\r\n            }\r\n\r\n            // console.log(email,loginType);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n  return (\r\n    <Container>\r\n      <button type='button' onClick={()=>firebaseLogin(\"google\")}>\r\n        <BsGoogle/>\r\n      </button>\r\n      <button type='button' onClick={()=>firebaseLogin(\"facebook\")}>\r\n        <BsFacebook/>\r\n      </button>\r\n      <button type='button' onClick={()=>firebaseLogin(\"github\")}>\r\n        <BsGithub/>\r\n      </button>\r\n    </Container>\r\n  )\r\n}\r\n\r\n\r\nconst Container= styled.div`\r\ndisplay: flex;\r\n  width: 100%;\r\n  justify-content: center;\r\n  gap: 1rem;\r\n  background-color: transparent;\r\n\r\n  button {\r\n    background-color: transparent;\r\n    border: 0.1rem solid #4e0eff;\r\n    font-size: 1.5rem;\r\n    padding: 0.8rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    border-radius: 0.4rem;\r\n    &:hover {\r\n      background-color: #4e0eff;\r\n    }\r\n  }\r\n\r\n`;","import React, { useState, useEffect } from \"react\";\r\n// styled components help to write css and js in same file.\r\nimport styled from \"styled-components\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport Logo from \"../assets/logo.svg\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from \"axios\"\r\nimport { registerRoute } from \"../utils/APIRoutes\";\r\nimport SocialLoginButtons from \"../components/SocialLoginButtons\";\r\n\r\n\r\nfunction Register() {\r\n  \r\n    const navigate=useNavigate();\r\n    // create a state.here we store the params returned by useState in values and setvalues.UseState allows to track state in function.state refers to data that need to be tracked.\r\n  // changing state means our values get updated in console ie state change\r\n  // Hooks allows functions to have access to state and other Reacr features.\r\n  const [values, setValues] = useState({\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  });\r\n\r\n  const toastOptions = {\r\n    position: \"bottom-right\",\r\n    autoClose: 8000, //ie close after 8s\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    theme: \"dark\",\r\n  };\r\n\r\n  \r\n  // UseEffect is a hook by which we tell react it need to do something after rendering.\r\n  // this will run only first time component is loaded.\r\n  useEffect(()=>{\r\n    // here we see if user is present in local storage and if yes then we navigate to /\r\n    if(localStorage.getItem('chat-app-user')){\r\n        navigate('/')\r\n    }\r\n  },[]);\r\n\r\n\r\n  // here we are handling validations on our input\r\n  const handleValidation = () => {\r\n    const { username, email, password, confirmPassword } = values;\r\n    if (password !== confirmPassword) {\r\n    //   we used toast to make alert beautiful\r\n        toast.error(\r\n        \"Password and Confirm Password should be same.\",\r\n        toastOptions\r\n      );\r\n      return false;\r\n    } \r\n    else if (username.length < 3) {\r\n      toast.error(\r\n        \"Username should be greater than 3 characters.\",\r\n        toastOptions\r\n      );\r\n      return false;\r\n    } \r\n    else if (password.length < 8) {\r\n      toast.error(\r\n        \"Password should be greater than 7 characters.\",\r\n        toastOptions\r\n      );\r\n      return false;\r\n    }\r\n    else if (email===\"\") {\r\n        toast.error(\r\n          \"Email is required.\",\r\n          toastOptions\r\n        );\r\n        return false;\r\n      }\r\n    return true;\r\n  };\r\n\r\n  const handleSubmit =async (event) => {\r\n    // event.preventDefault se we r preventing submit of form.\r\n    event.preventDefault();\r\n    if(handleValidation()){\r\n        // if it return true,call our api\r\n        const { username, email, password } = values;\r\n        const {data}=await axios.post(registerRoute,{\r\n            username,\r\n            email,\r\n            password,\r\n\r\n        }); //here we extracting key data from object axios.post returns\r\n        if(data.status===false)\r\n        {\r\n            toast.error(data.message,toastOptions)\r\n        }\r\n        if(data.status===true)\r\n        {\r\n            // here we r passing user information to local storage in json format\r\n        //    localStorage objects allows to save key/val pairs in browser and set Item sets value of key-value pair\r\n            localStorage.setItem('chat-app-user',JSON.stringify(data.user));\r\n        }\r\n        // if everything correct we will navigate user to chat container ie home page.\r\n        navigate(\"/\");\r\n    }\r\n\r\n\r\n    //   alert(\"form\");\r\n    //   console.log(values,setValues);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    // here we destructure our input and it get break like event.target.name=username and val=val of username\r\n    setValues({ ...values, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <FormContainer>\r\n        <form onSubmit={(event) => handleSubmit(event)}>\r\n          <div className=\"brand\">\r\n            <img src={Logo} alt=\"Logo\" />\r\n            <h1>Snapp</h1>\r\n          </div>\r\n\r\n          <input\r\n            type=\"text\"\r\n            name=\"username\"\r\n            placeholder=\"Username\"\r\n            onChange={(e) => handleChange(e)}\r\n          />\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"Email\"\r\n            onChange={(e) => handleChange(e)}\r\n          />\r\n\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"Password\"\r\n            onChange={(e) => handleChange(e)}\r\n          />\r\n\r\n          <input\r\n            type=\"password\"\r\n            name=\"confirmPassword\"\r\n            placeholder=\"Confirm Password\"\r\n            onChange={(e) => handleChange(e)}\r\n          />\r\n\r\n          <button type=\"submit\" className=\"btn\">Create User</button>\r\n          <SocialLoginButtons/>\r\n          <span>\r\n            {/* if user have an account then take him to login */}\r\n            Already have an account? <Link to=\"/login\">Login</Link>\r\n          </span>\r\n        </form>\r\n      </FormContainer>\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n}\r\n\r\n// here we applying styles\r\nconst FormContainer = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  gap: 1rem;\r\n  align-items: center;\r\n  background-color: #131324;\r\n\r\n  .brand {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 1rem;\r\n    justify-content: center;\r\n\r\n    img {\r\n      height: 5rem;\r\n    }\r\n\r\n    h1 {\r\n      color: white;\r\n      text-transform: uppercase;\r\n    }\r\n  }\r\n\r\n  form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 2rem;\r\n    background-color: #00000076;\r\n    border-radius: 2rem;\r\n    padding: 3rem 5rem;\r\n  }\r\n\r\n  input {\r\n    background-color: transparent;\r\n    padding: 1rem;\r\n    border: 0.1rem solid #4e0eff;\r\n    border-radius: 0.4rem;\r\n    color: white;\r\n    width: 100%;\r\n    font-size: 1rem;\r\n\r\n    // ie whenever we focus on input then border change as follows\r\n    &:focus {\r\n      border: 0.1rem solid #997af0;\r\n      outline: none;\r\n    }\r\n  }\r\n  .btn {\r\n    background-color: #997af0;\r\n    color: white;\r\n    padding: 1rem 2rem;\r\n    border: none;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    border-radius: 0.4rem;\r\n    font-size: 1rem;\r\n    text-transform: uppercase;\r\n    transition: 0.5s ease-in-out;\r\n\r\n    &:hover {\r\n      background-color: #4e0eff;\r\n    }\r\n  }\r\n  span {\r\n    color: white;\r\n    text-transform: uppercase;\r\n    a {\r\n      color: #4e0eff;\r\n      text-decoration: none;\r\n      font-weight: bold;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Register;\r\n"],"names":["SocialLoginButtons","navigate","useNavigate","providers","google","GoogleAuthProvider","facebook","FacebookAuthProvider","github","GithubAuthProvider","firebaseLogin","loginType","provider","signInWithPopup","firebaseAuth","userData","email","user","providerData","axios","firebaseLoginRoute","data","status","localStorage","setItem","JSON","stringify","console","log","Container","type","onClick","styled","FormContainer","useState","username","password","confirmPassword","values","setValues","toastOptions","position","autoClose","pauseOnHover","draggable","theme","useEffect","getItem","handleValidation","toast","length","handleSubmit","event","preventDefault","registerRoute","message","handleChange","target","name","value","onSubmit","className","src","Logo","alt","placeholder","onChange","e","to"],"sourceRoot":""}