{"version":3,"file":"static/js/197.100c3307.chunk.js","mappings":"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","sources":["components/Contacts.jsx","components/Welcome.jsx","components/ChatInput.jsx","components/Logout.jsx","components/Messages.jsx","components/ChatContainer.jsx","pages/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Logo from \"../assets/logo.svg\";\r\n\r\nexport default function Contacts({ contacts, currentUser,changeChat }) {\r\n  const [currentUserName, setCurrentUserName] = useState(undefined);\r\n  const [currentUserImage, setcurrentUserImage] = useState(undefined);\r\n  const [currentSelected, setCurrentSelected] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    // console.log(contacts)\r\n    if (currentUser) {\r\n      setcurrentUserImage(currentUser.avatarImage);\r\n      setCurrentUserName(currentUser.username);\r\n    }\r\n  }, [currentUser]);\r\n\r\n    //whenever we click on some chat we will have current chat    \r\n  const changeCurrentChat = (index, contact) => {\r\n        // here save current selected index and change chat to contact\r\n    setCurrentSelected(index);\r\n        changeChat(contact);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {\r\n        // check if these exists then render our container\r\n        currentUserImage && currentUserName && (\r\n          <Container>\r\n            <div className=\"brand\">\r\n              <img src={Logo} alt=\"Logo\" />\r\n              <h3>Snapp</h3>\r\n            </div>\r\n            <div className=\"contacts\">\r\n              {contacts.map((contact, index) => {\r\n                return (\r\n                  <div\r\n                    className={`contact ${\r\n                      // check if index==currentSelected\r\n                      index === currentSelected ? \"selected\" : \"\"\r\n                    }`}\r\n                    key={index}\r\n                    // now on click current chat gets selected\r\n                    onClick={()=>changeCurrentChat(index,contact)}\r\n                  >\r\n                    <div className=\"avatar\">\r\n                      <img\r\n                        src={`data:image/svg+xml;base64,${contact.avatarImage}`}\r\n                        alt=\"avatar\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"username\">\r\n                      <h3>{contact.username}</h3>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            <div className=\"current-user\">\r\n              <div className=\"avatar\">\r\n                  <img\r\n                    src={`data:image/svg+xml;base64,${currentUserImage}`}\r\n                    alt=\"avatar\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"username\">\r\n                  <h2>{currentUserName}</h2>\r\n                </div>\r\n              </div>\r\n          </Container>\r\n        )\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 10% 75% 15%;\r\n  overflow: hidden;\r\n  background-color: #080420;\r\n\r\n  .brand {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 1rem;\r\n    justify-content: center;\r\n\r\n    img {\r\n      height: 2rem;\r\n    }\r\n    h3 {\r\n      color: white;\r\n      text-transform: uppercase;\r\n    }\r\n  }\r\n  .contacts {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    overflow: auto;\r\n    gap: 0.8rem;\r\n\r\n    // now to style the scrollbar\r\n    &::-webkit-scrollbar {\r\n      width: 0.2rem;\r\n\r\n      &-thumb {\r\n        background-color: #ffffff39;\r\n        width: 0.1rem;\r\n        border-radius: 1rem;\r\n      }\r\n    }\r\n    .contact {\r\n      background-color: #ffffff34;\r\n      min-height: 5rem;\r\n      cursor: pointer;\r\n      width: 90%;\r\n      border-radius: 0.2rem;\r\n      padding: 0.4rem;\r\n      display: flex;\r\n      gap: 1rem;\r\n      align-items: center;\r\n      transition: 0.5s ease-in-out;\r\n      .avatar {\r\n        img {\r\n          height: 3rem;\r\n        }\r\n      }\r\n      .username {\r\n        h3 {\r\n          color: white;\r\n        }\r\n      }\r\n    }\r\n    .selected {\r\n      background-color: #9a86f3;\r\n    }\r\n  }\r\n  .current-user {\r\n    background-color: #0d0d30;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 2rem;\r\n    .avatar {\r\n      img {\r\n        height: 4rem;\r\n        max-inline-size: 100%;\r\n      }\r\n    }\r\n    .username {\r\n      h2 {\r\n        color: white;\r\n      }\r\n    }\r\n    @media screen and (min-width: 720px) and (max-width: 1080px) {\r\n      gap: 0.5rem;\r\n      .username {\r\n        h2 {\r\n          font-size: 1rem;\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Robot from \"../assets/robot.gif\"\r\n\r\n\r\nexport default function Welcome({currentUser}) {\r\n    return (\r\n        \r\n        <Container>\r\n        <img src={Robot} alt=\"Robot\" />\r\n        <h1>\r\n            Hi\r\n            Welcome, <span>{currentUser?currentUser.username: \"\"}!</span>\r\n        </h1>\r\n        <h3>Please select a chat to Start Messanging.</h3>\r\n    </Container>\r\n   \r\n  )\r\n}\r\n\r\n\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  flex-direction: column;\r\n  img {\r\n    height: 20rem;\r\n  }\r\n  span {\r\n    color: #4e0eff;\r\n  }\r\n`;","import React,{useState} from 'react'\r\nimport styled from 'styled-components'\r\nimport Picker from \"emoji-picker-react\"\r\nimport {IoMdSend} from \"react-icons/io\"\r\nimport {BsEmojiSmileFill} from \"react-icons/bs\"\r\n\r\n\r\nexport default function ChatInput({handleSendMsg}) {\r\n    const [showEmojiPicker,setShowEmojiPicker] =useState(false);\r\n    const [msg,setMsg] =useState(\"\");\r\n  \r\n\r\n    const handleEmojiPickerHideShow= ()=>{\r\n        // here flip the showEmoji picker\r\n        setShowEmojiPicker(!showEmojiPicker);\r\n    }\r\n\r\n    const handleEmojiClick= (event,emoji)=>{\r\n        let message=msg;\r\n        message+=emoji.emoji; //ie add emoji to ur message\r\n        setMsg(message);\r\n    }\r\n\r\n    const sendChat=(event)=>{\r\n        event.preventDefault();\r\n        // here we sending our message,that first prevent sending on default then if message>0 then send\r\n        if(msg.length>0){\r\n            handleSendMsg(msg);\r\n            setMsg('');\r\n        }\r\n    }\r\n    return (\r\n\r\n    <Container>\r\n      <div className=\"button-container\">\r\n        <div className=\"emoji\">\r\n            <BsEmojiSmileFill onClick={handleEmojiPickerHideShow}/>\r\n            {\r\n                // if its true then we will render picker and showemoji picker\r\n                showEmojiPicker && <Picker onEmojiClick={handleEmojiClick}/>\r\n            }\r\n        </div>\r\n      </div>\r\n\r\n    <form className=\"input-container\" onSubmit={(e)=> sendChat(e)}>\r\n        <input type=\"text\" placeholder='Type your message!!' value={msg} onChange={(e)=>setMsg(e.target.value)}/>\r\n        <button type=\"submit\">\r\n            <IoMdSend/>\r\n        </button>\r\n    \r\n    </form>\r\n\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  align-items: center;\r\n  grid-template-columns: 5% 95%;\r\n  background-color: #080420;\r\n  padding: 0 2rem;\r\n  padding-bottom: 0.3rem;\r\n\r\n  @media screen and (min-width: 720px) and (max-width: 1080px) {\r\n    padding: 0 1rem;\r\n    gap: 1rem;\r\n  }\r\n\r\n  .button-container {\r\n    display: flex;\r\n    align-items: center;\r\n    color: white;\r\n    gap: 1rem;\r\n\r\n    .emoji {\r\n      position: relative;\r\n      svg {\r\n        font-size: 1.5rem;\r\n        color: #ffff00c8;\r\n        cursor: pointer;\r\n      }\r\n      .emoji-picker-react {\r\n        position: absolute;\r\n        top: -350px;\r\n        background-color: #080420;\r\n        box-shadow: 0 5px 10px #9a86f3;\r\n        border-color: #9a86f3;\r\n       \r\n        .emoji-scroll-wrapper::-webkit-scrollbar {\r\n          background-color: #080420;\r\n          width: 5px;\r\n          &-thumb {\r\n            background-color: #9a86f3;\r\n          }\r\n        }\r\n        .emoji-categories {\r\n          button {\r\n            filter: contrast(0);\r\n          }\r\n        }\r\n        .emoji-search {\r\n          background-color: transparent;\r\n          color: white;\r\n          border-color: #9a86f3;\r\n        }\r\n        .emoji-group:before {\r\n          background-color: #080420;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .input-container {\r\n    width: 100%;\r\n    border-radius: 2rem;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 2rem;\r\n    background-color: #ffffff34;\r\n    input {\r\n      width: 90%;\r\n      height: 60%;\r\n      background-color: transparent;\r\n      color: white;\r\n      border: none;\r\n      padding-left: 1rem;\r\n      font-size: 1.2rem;\r\n      &::selection {\r\n        background-color: #9a86f3;\r\n      }\r\n      &:focus {\r\n        outline: none;\r\n      }\r\n    }\r\n    button {\r\n      padding: 0.3rem 2rem;\r\n      cursor: pointer;\r\n      border-radius: 2rem;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      background-color: #9a86f3;\r\n      :hover{\r\n        background-color:#9a36f3;\r\n      }\r\n      border: none;\r\n      @media screen and (min-width: 720px) and (max-width: 1080px) {\r\n        padding: 0.3rem 1rem;\r\n        svg {\r\n          font-size: 1rem;\r\n        }\r\n      }\r\n      svg {\r\n        font-size: 2rem;\r\n        color: white;\r\n      }\r\n    }\r\n  }\r\n`;","import axios from 'axios'\r\nimport React from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport {BiPowerOff} from 'react-icons/bi'\r\n\r\nexport default function Logout() {\r\n   \r\n    const navigate=useNavigate();\r\n   const handleClick=async ()=>{\r\n\r\n    // here we will clear local storage and all user data is in local storage.\r\n      localStorage.clear();\r\n      navigate(\"/login\");\r\n\r\n   }\r\n \r\n    return (\r\n    <Button onClick={handleClick}>\r\n        {/* It gives power off button */}\r\n      <BiPowerOff/>\r\n    </Button>\r\n  )\r\n}\r\n\r\n\r\n// we replace our div by button\r\nconst Button=styled.button`\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 0.5rem;\r\n  border-radius: 0.5rem;\r\n  background-color: #9a86f3;\r\n  border: none;\r\n  cursor: pointer;\r\n  :hover\r\n  {\r\n    background-color:#9a36f3;\r\n  }\r\n  svg {\r\n    font-size: 1.3rem;\r\n    color: #ebe7ff;\r\n  }\r\n  `","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nexport default function Messages() {\r\n  return (\r\n    <Container>\r\n      Messages\r\n    </Container>\r\n  )\r\n}\r\n\r\n\r\nconst Container=styled.div`\r\n\r\n   height:80%;\r\n\r\n`;","import axios from \"axios\";\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ChatInput from \"./ChatInput\";\r\nimport Logout from \"./Logout\";\r\nimport Messages from \"./Messages\";\r\nimport { getAllMessagesRoute, sendMessageRoute } from \"../utils/APIRoutes\";\r\nimport {v4 as uuidv4} from \"uuid\"\r\n// uuid generate unique id for all messages\r\n\r\nexport default function ChatContainer({ currentChat, currentUser, socket }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [arrivalMessage, setArrivalMessage] = useState(null);\r\n  const scrollRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (currentChat) {\r\n        const response = await axios.post(getAllMessagesRoute, {\r\n          from: currentUser._id,\r\n          to: currentChat._id,\r\n        });\r\n        setMessages(response.data);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [currentChat]);\r\n\r\n  const handleSendMsg = async (msg) => {\r\n    // alert(msg);\r\n    await axios.post(sendMessageRoute, {\r\n      from: currentUser._id,\r\n      to: currentChat._id,\r\n      message: msg,\r\n    });\r\n    socket.current.emit(\"send-msg\", {\r\n      to: currentChat._id,\r\n      from: currentUser._id,\r\n      message: msg,\r\n    });\r\n\r\n    // now we will destructure current messages array\r\n    const msgs = [...messages];\r\n    // push message sent by current user to messages array\r\n    msgs.push({ fromSelf: true, message: msg });\r\n    setMessages(msgs);\r\n  };\r\n\r\n  // this useEffect at first time whenever component is loaded\r\n  useEffect(() => {\r\n    if (socket.current) {\r\n      socket.current.on(\"msg-receive\", (msg) => {\r\n        setArrivalMessage({\r\n          fromSelf: false, //false as its not send by himself its received\r\n          message: msg,\r\n        });\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  // It will run everytime when there is a new arrival message\r\n  useEffect(() => {\r\n    arrivalMessage && setMessages((prev) => [...prev, arrivalMessage]);\r\n  }, [arrivalMessage]);\r\n\r\n  // It should run everytime we have changes in messages\r\n  // It would scroll into the new messages and have that animation effect\r\n  useEffect(() => {\r\n    scrollRef.current?.scrollIntoView({ behaviour: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  return (\r\n    <>\r\n      {\r\n        // here check if any chat is selected then only\r\n        currentChat && (\r\n          <Container>\r\n            <div className=\"chat-header\">\r\n              <div className=\"user-details\">\r\n                <div className=\"avatar\">\r\n                  <img\r\n                    src={`data:image/svg+xml;base64,${currentChat.avatarImage}`}\r\n                    alt=\"avatar\"\r\n                  />\r\n                </div>\r\n                <div className=\"username\">\r\n                  <h3>{currentChat.username}</h3>\r\n                </div>\r\n              </div>\r\n              <Logout />\r\n            </div>\r\n\r\n            <div className=\"chat-messages\">\r\n              {messages.map((message) => {\r\n                return (\r\n                  <div ref={scrollRef} key={uuidv4}>\r\n                    <div\r\n                      className={`message ${\r\n                        message.fromSelf ? \"sended\" : \"received\"\r\n                      }`}\r\n                    >\r\n                      <div className=\"content\">\r\n                        <p>{message.message}</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n            {/* <Messages/> */}\r\n            {/* <div className=\"chat-input\"></div> */}\r\n\r\n            <ChatInput handleSendMsg={handleSendMsg} />\r\n          </Container>\r\n        )\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding-top: 0.2rem;\r\n  display: grid;\r\n  grid-template-rows: 10% 80% 10%;\r\n  gap: 0.1rem;\r\n  overflow: hidden;\r\n  @media screen and (min-width: 720px) and (max-width: 1080px) {\r\n    grid-template-rows: 15% 70% 15%;\r\n  }\r\n  .chat-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 0 2rem;\r\n\r\n    .user-details {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 1rem;\r\n\r\n      .avatar {\r\n        img {\r\n          height: 3rem;\r\n        }\r\n      }\r\n\r\n      .username {\r\n        h3 {\r\n          color: white;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .chat-messages {\r\n    padding: 1rem 2rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n    overflow: auto;\r\n    &::-webkit-scrollbar {\r\n      width: 0.2rem;\r\n      &-thumb {\r\n        background-color: #ffffff39;\r\n        width: 0.1rem;\r\n        border-radius: 1rem;\r\n      }\r\n    }\r\n    .message {\r\n      display: flex;\r\n      align-items: center;\r\n      .content {\r\n        max-width: 40%;\r\n        overflow-wrap: break-word;\r\n        padding: 1rem;\r\n        font-size: 1.1rem;\r\n        border-radius: 1rem;\r\n        color: #d1d1d1;\r\n        @media screen and (min-width: 720px) and (max-width: 1080px) {\r\n          max-width: 70%;\r\n        }\r\n      }\r\n    }\r\n    .sended {\r\n      justify-content: flex-end;\r\n      .content {\r\n        background-color: #4f04ff21;\r\n      }\r\n    }\r\n    .recieved {\r\n      justify-content: flex-start;\r\n      .content {\r\n        background-color: #9900ff20;\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React,{useState,useEffect,useRef} from 'react'\r\nimport styled from 'styled-components'\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { allUsersRoute,host } from '../utils/APIRoutes';\r\nimport Contacts from '../components/Contacts';\r\nimport Welcome from '../components/Welcome';\r\nimport ChatContainer from '../components/ChatContainer';\r\nimport {io} from \"socket.io-client\"\r\n\r\n// now call this Api\r\nfunction Chat() {\r\n\r\n  const socket=useRef();\r\n  const navigate=useNavigate()\r\n  const [contacts,setContacts]=useState([]);\r\n  const [currentUser,setCurrentUser]=useState(undefined)\r\n  const [currentChat,setCurrentChat]=useState(undefined)\r\n  const [isLoaded,setIsLoaded]=useState(false)\r\n\r\n// we can use as much useEffect as we want\r\nuseEffect(()=>{\r\n  const fetchData= async()=>{\r\n      // here check if there is no user in local storage then navigate to /login\r\n      if(!localStorage.getItem('chat-app-user')){\r\n      navigate('/login')\r\n      }\r\n      else\r\n      {\r\n        setCurrentUser(await JSON.parse(localStorage.getItem(\"chat-app-user\")))\r\n        setIsLoaded(true)\r\n      }\r\n\r\n};\r\n  // we use async as its await axios\r\n  fetchData();\r\n},[]);\r\n\r\n// as soon as current user is changed we want this to run\r\nuseEffect(()=>{\r\n  if(currentUser){\r\n    // here establish connection\r\n    socket.current= io(host);\r\n    //We pass currentuser id whenever he is locked in we will add it to global map in backend. \r\n    socket.current.emit(\"add-user\",currentUser._id);\r\n  }\r\n\r\n},[currentUser])\r\n\r\n\r\n\r\nuseEffect(()=>{\r\n  const fetchData= async()=>{\r\n    // check if current user exists or not\r\n    if(currentUser)\r\n    {\r\n       if(currentUser.isAvatarImageSet)\r\n       {\r\n          const data= await axios.get(`${allUsersRoute}/${currentUser._id}`);\r\n          setContacts(data.data);\r\n        }\r\n        // if avatar image is not set then navigate to set avatar\r\n        else\r\n        {\r\n          navigate(\"/setAvatar\");\r\n        }\r\n    }\r\n\r\n};\r\n  // we use async as its await axios\r\n  fetchData();\r\n},[currentUser]);\r\n  // Call just once when component created\r\n\r\n\r\n  // now we want chat oppens on click so we make function\r\n  const handleChatChange=(chat)=>{\r\n    // here we will set our current chat as the clicked chat.\r\n    setCurrentChat(chat);\r\n  }\r\n\r\n  return (\r\n    // create fragments\r\n   <Container>\r\n    <div className=\"container\">\r\n      {/* pass currentchat as prop */}\r\n      <Contacts \r\n      // {contacts} will have value \r\n      contacts={contacts} \r\n      currentUser={currentUser} \r\n      changeChat={handleChatChange}\r\n      />\r\n      {/* here if no selected chat if there are contacts show chat container else show welcome screen,  */}\r\n      { isLoaded &&\r\n          currentChat===undefined?(\r\n            // Now when we click any chat then welcome page go away\r\n            <Welcome \r\n            currentUser={currentUser} />\r\n            ):(\r\n              \r\n              // from here send currentChat\r\n                <ChatContainer\r\n                 currentChat={currentChat} \r\n                 currentUser={currentUser}\r\n                  socket={socket}\r\n                  />\r\n\r\n            )\r\n\r\n\r\n        }\r\n    </div>\r\n   </Container>\r\n  )\r\n}\r\n\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  gap: 1rem;\r\n  align-items: center;\r\n  background-color: #131324;\r\n\r\n  .container {\r\n    height: 85vh;\r\n    width: 85vw;\r\n    background-color: #00000076;\r\n    display: grid;\r\n    grid-template-columns: 25% 75%;\r\n    // ie 25% contact section and 75% chat section\r\n\r\n    // making responsive for tablet mode\r\n    @media screen and (min-width: 720px) and (max-width: 1080px) {\r\n      grid-template-columns: 35% 65%; \r\n    }\r\n  }\r\n`;\r\n\r\nexport default Chat\r\n"],"names":["Contacts","contacts","currentUser","changeChat","useState","undefined","currentUserName","setCurrentUserName","currentUserImage","setcurrentUserImage","currentSelected","setCurrentSelected","useEffect","avatarImage","username","Container","className","src","Logo","alt","map","contact","index","onClick","changeCurrentChat","styled","Welcome","Robot","ChatInput","handleSendMsg","showEmojiPicker","setShowEmojiPicker","msg","setMsg","onEmojiClick","event","emoji","message","onSubmit","e","preventDefault","length","type","placeholder","value","onChange","target","Logout","navigate","useNavigate","handleClick","localStorage","clear","Button","ChatContainer","currentChat","socket","messages","setMessages","arrivalMessage","setArrivalMessage","scrollRef","useRef","fetchData","axios","getAllMessagesRoute","from","_id","to","response","data","sendMessageRoute","current","emit","msgs","push","fromSelf","on","prev","scrollIntoView","behaviour","ref","uuidv4","setContacts","setCurrentUser","setCurrentChat","isLoaded","setIsLoaded","getItem","JSON","parse","io","host","isAvatarImageSet","allUsersRoute","chat"],"sourceRoot":""}