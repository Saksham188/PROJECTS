{"version":3,"file":"static/js/231.af7042b0.chunk.js","mappings":"iVAee,SAASA,IAIpB,IACMC,GAASC,EAAAA,EAAAA,MACf,GAA4BC,EAAAA,EAAAA,UAAS,IAAG,eAAjCC,EAAO,KAACC,EAAU,KAEzB,GAAgCF,EAAAA,EAAAA,WAAS,GAAK,eAAvCG,EAAS,KAACC,EAAY,KAC7B,GAA0CJ,EAAAA,EAAAA,eAASK,GAAU,eAAtDC,EAAc,KAACC,EAAiB,KAEjCC,EAAe,CACjBC,SAAU,eACVC,UAAW,IACXC,cAAc,EACdC,WAAW,EACXC,MAAO,SAGXC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,yCAAE,mFAETC,aAAaC,QAAQ,kBACzBnB,EAAS,UACZ,2CAEF,kBANgB,mCAQfiB,GACJ,GAAE,IAEF,IAAMG,EAAiB,yCAAC,qGAEAb,IAAjBC,EAA0B,gBAEzBa,EAAAA,GAAAA,MAAY,0BAA0BX,GAAa,uCAKjCY,KAAKC,MAAML,aAAaC,QAAQ,kBAAkB,KAAD,EAAzD,OAAJK,EAAK,EAAD,cACSC,EAAAA,EAAAA,KAAW,GAAD,OAAIC,EAAAA,GAAc,YAAIF,EAAKG,KAAM,CAE1DC,MAAOzB,EAAQK,KAChB,KAAD,YAHKqB,EAAI,EAAJA,MAMCC,OAEJN,EAAKO,kBAAiB,EACtBP,EAAKQ,YAAYH,EAAKD,MACtBV,aAAae,QAAQ,gBAAgBX,KAAKY,UAAUV,IACpDxB,EAAS,MAITqB,EAAAA,GAAAA,MAAY,wCAAwCX,GAEvD,4CAER,kBA7BsB,mCA6DzB,OA7BEM,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,yCAAE,wGAEHY,EAAK,GAEHM,EAAE,EAAE,KAAD,OAACA,EAAE,GAAC,iCAEOV,EAAAA,EAAAA,IACd,UAnEV,sCAoEgB,YAAIW,KAAKC,MAAoB,IAAdD,KAAKE,YAC5B,KAAD,EAHKV,EAAM,EAAD,KAKLW,EAAO,IAAIC,EAAAA,GAAOZ,EAAMC,MAE9BA,EAAKY,KAAKF,EAAOG,SAAS,WAAW,OATzBP,IAAG,uBAYnB/B,EAAWyB,GACXvB,GAAa,GAAO,kDAGpBqC,QAAQC,IAAI,8BAA6B,MAAU,0DAGzD,kBAvBa,mCAyBf3B,GACJ,GAAE,KAIF,gCAEIZ,GAAW,SAACwC,EAAS,WAEjB,gBAAKC,IAAKC,EAAQC,IAAI,SAASC,UAAU,cAKzC,UAACJ,EAAS,YACd,gBAAKI,UAAU,kBAAiB,UAC5B,wBAAI,8CAIR,gBAAKA,UAAU,UAAS,SAEpB9C,EAAQ+C,KAAI,SAACC,EAAOC,GAChB,OACI,gBACAH,UAAS,iBACLzC,IAAiB4C,EAAO,WAAW,IAEpC,UAGP,gBAAKN,IAAG,oCAA+BK,GAAWH,IAAI,SACrDK,QAAS,kBAAK5C,EAAkB2C,EAAM,KARxBA,EAanB,OAEJ,mBAAQH,UAAU,aAAaI,QAASjC,EAAkB,SAAE,2BAIhE,SAAC,KAAc,MAGnB,CAIA,IAAMyB,EAAYS,EAAAA,GAAAA,IAAU,yhC","sources":["pages/SetAvatar.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n// styled components help to write css and js in same file.\r\nimport styled from \"styled-components\";\r\nimport {useNavigate } from \"react-router-dom\";\r\nimport loader from \"../assets/loader.gif\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from \"axios\"\r\nimport { Buffer } from \"buffer\";\r\n\r\nimport { setAvatarRoute } from \"../utils/APIRoutes\";\r\n\r\n\r\n// here we will be making Avatars\r\n\r\nexport default function SetAvatar() {\r\n\r\n    // Api route for images.\r\n    // here we write random numbers and it generate random avatars\r\n    const api=`https://api.multiavatar.com/4645646`;\r\n    const navigate=useNavigate();\r\n    const [avatars,setAvatars]= useState([]);\r\n    // while avatars are loading we wanna display the loader.gif\r\n    const [isLoading,setisLoading]= useState(true);\r\n    const [selectedAvatar,setselectedAvatar]= useState(undefined);\r\n    \r\n    const toastOptions = {\r\n        position: \"bottom-right\",\r\n        autoClose: 8000, //ie close after 8s\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        theme: \"dark\",\r\n    };\r\n\r\n    useEffect(()=>{\r\n        const fetchData= async()=>{\r\n            // here check if there is no user in local storage then navigate to /login\r\n            if(!localStorage.getItem('chat-app-user')){\r\n            navigate('/login')\r\n        }\r\n\r\n      };\r\n        // we use async as its await axios\r\n        fetchData();\r\n    },[]);\r\n\r\n    const setProfilePicture=async ()=>{\r\n\r\n        if(selectedAvatar===undefined)\r\n        {\r\n            toast.error(\"Please select an avatar\",toastOptions)\r\n        }\r\n        else\r\n        {\r\n            // first get user from localhost\r\n            const user= await JSON.parse(localStorage.getItem(\"chat-app-user\"));\r\n            const {data}=await axios.post(`${setAvatarRoute}/${user._id}`,{\r\n                \r\n                image: avatars[selectedAvatar],\r\n            });\r\n\r\n            // check this as we were getting 503 error\r\n            if(data.isSet)\r\n            {\r\n                user.isAvatarImageSet=true;\r\n                user.avatarImage=data.image;\r\n                localStorage.setItem(\"chat-app-user\",JSON.stringify(user));\r\n                navigate('/');\r\n            }\r\n            else\r\n            {\r\n                toast.error(\"Error setting avatar.Please try again\",toastOptions);\r\n\r\n            }\r\n        }   \r\n    };\r\n\r\n    // this would be done only once\r\n    useEffect(()=>{\r\n        const fetchData= async()=>{\r\n            try {\r\n                const data=[];\r\n                // for each dont work with API so use for loop\r\n                for(let i=0;i<4;i++)\r\n                {\r\n                    const image=await axios.get(\r\n                        // it generates multiple random numbers and we get random image everytime\r\n                        `${api}/${Math.round(Math.random()*1000)}` \r\n                    );\r\n                    // For binary daata in node we use buffer. it converts our image into binary format\r\n                    const buffer=new Buffer(image.data)\r\n                    // we convert buffer to base64 string\r\n                    data.push(buffer.toString(\"base64\"));\r\n                }\r\n    \r\n                setAvatars(data);\r\n                setisLoading(false);\r\n                \r\n            } catch (error) {\r\n                console.log('Error while fetching data. ' + error);\r\n\r\n            }\r\n         };\r\n        // we use async as its await axios\r\n        fetchData();\r\n    },[]);\r\n\r\n  return (\r\n    // <> these are called fragments and they r used to return multiple elements.\r\n    <>\r\n    {\r\n        isLoading?(<Container>\r\n            {/* here loader gif gets called until image is not loaded */}\r\n            <img src={loader} alt=\"loader\" className=\"loader\"/>\r\n        </Container>\r\n        ):(\r\n\r\n            \r\n            <Container>\r\n        <div className=\"title-container\">\r\n            <h1>\r\n                Pick an avatar as your profile picture\r\n            </h1>\r\n        </div>\r\n        <div className=\"avatars\">\r\n        {\r\n            avatars.map((avatar,index)=>{\r\n                return(\r\n                    <div  key={index}\r\n                    className={`avatar ${\r\n                        selectedAvatar===index? \"selected\":\"\"\r\n                \r\n                    }`}\r\n                >\r\n                {/* now we convert base64 string to image */}\r\n                <img src={`data:image/svg+xml;base64,${avatar}`}  alt=\"avatar\"\r\n                 onClick={()=> setselectedAvatar(index)}\r\n                 />\r\n\r\n                </div>\r\n                );\r\n            })}\r\n        </div>\r\n        <button className=\"submit-btn\" onClick={setProfilePicture} >Set as Profile Pic</button>\r\n\r\n    </Container>\r\n    )}\r\n    <ToastContainer/>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  gap: 3rem;\r\n  background-color: #131324;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  .loader {\r\n    max-inline-size: 100%;\r\n  }\r\n  .title-container {\r\n    h1 {\r\n      color: white;\r\n    }\r\n  }\r\n  .avatars {\r\n    display: flex;\r\n    gap: 2rem;\r\n\r\n    .avatar {\r\n      border: 0.4rem solid transparent;\r\n      padding: 0.4rem;\r\n      border-radius: 5rem;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      transition: 0.5s ease-in-out;\r\n\r\n      img {\r\n        height: 6rem;\r\n        transition: 0.5s ease-in-out;\r\n      }\r\n    }\r\n    .selected {\r\n      border: 0.4rem solid #4e0eff;\r\n    }\r\n  }\r\n  .submit-btn {\r\n    background-color: #997af0;\r\n    color: white;\r\n    padding: 1rem 2rem;\r\n    border: none;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    border-radius: 0.4rem;\r\n    font-size: 1rem;\r\n    text-transform: uppercase;\r\n    &:hover {\r\n      background-color: #4e0eff;\r\n    }\r\n  }\r\n`;"],"names":["SetAvatar","navigate","useNavigate","useState","avatars","setAvatars","isLoading","setisLoading","undefined","selectedAvatar","setselectedAvatar","toastOptions","position","autoClose","pauseOnHover","draggable","theme","useEffect","fetchData","localStorage","getItem","setProfilePicture","toast","JSON","parse","user","axios","setAvatarRoute","_id","image","data","isSet","isAvatarImageSet","avatarImage","setItem","stringify","i","Math","round","random","buffer","Buffer","push","toString","console","log","Container","src","loader","alt","className","map","avatar","index","onClick","styled"],"sourceRoot":""}